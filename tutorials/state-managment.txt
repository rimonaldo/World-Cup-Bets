The Four Kinds of React State to Manage 
_______________________________________________________________

1.Local state - 
    **USE STATE**
    useState is the first tool you should reach for to manage 
    state in your components.
    
    It can take accept any valid data value, 
    including primitive and object values. Additionally, 
    its setter function can be passed down to other components 
    as a callback function 
    (without needing optimizations like useCallback).

    **USE REDUCER**
    useReducer is another option that can be used for either local or 
    global state. It is similar in many ways to useState under the hood, 
    although instead of just an initial state it accepts a reducer.

    The benefit of useReducer is that it provides a built-in way to perform 
    a number of different state operations with the help of the reducer 
    function, which makes it more dynamic overall than useState.

2.Global state - 

    To manage your global state, reach for tried and 
    tested third-party libraries like Zustand, Jotai, and Recoil.

    *The reason to not use Context for global state management 
    lies in the way it works. The default behavior for 
    Context is to re-render all children components if the 
    value provided to it as a prop changes.


    *Zustand 
        - Zustand renders components only on changes to the 
        value of the state. Changes in the state can often be 
        handled without having to re-render a component.
        
        
        
        -

3.Server state - 
    What happens when there is a network error? Do I really need 
    to hit my server every time my user visits the home page 
    if the data hasnâ€™t changed? Do I need to add useState and 
    useEffect in every component I want to fetch my data?

    To fix this, there are a couple of great libraries that make 
    data fetching in React a breeze: SWR and React Query.

4.URL state - 
    URL state is quite easy to manage, usually through 
    custom hooks that give us all the information we need 
    about our location, history, and pathname.

    If you are using React Router, you can get all the 
    information you need using useHistory or useLocation.


*credits - freecodecamp
https://www.freecodecamp.org/news/how-to-manage-state-in-your-react-apps/